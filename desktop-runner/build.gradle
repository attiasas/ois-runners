plugins {
    id "application"
    id 'org.beryx.runtime' version '1.8.4'
}

sourceSets.main.resources.srcDirs += [ rootProject.file('../../resources').path ]
mainClassName = 'org.ois.desktop.DesktopLauncher'
application.setMainClass(mainClassName)

java.sourceCompatibility = 11
java.targetCompatibility = 11
if (JavaVersion.current().isJava9Compatible()) {
    compileJava.options.release.set(11)
}

dependencies {
    implementation "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

    implementation "org.ois:open-interactive-simulation-core:$coreVersion"
}

def os = System.properties['os.name'].toLowerCase()
run {
    workingDir = rootProject.file('../../resources').path
    setIgnoreExitValue(true)

    if (os.contains('mac')) jvmArgs += "-XstartOnFirstThread"
}

jar {
    // sets the name of the .jar file this produces to the name of the game or app, with the version after.
    archiveFileName.set("${oisProjectTitle}-${oisProjectVersion}.jar")
    // the duplicatesStrategy matters starting in Gradle 7.0; this setting works.
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    dependsOn configurations.runtimeClasspath
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    // these "exclude" lines remove some unnecessary duplicate files in the output JAR.
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
    dependencies {
        exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
    }
    // setting the manifest makes the JAR runnable.
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    // this last step may help on some OSes that need extra instruction to make runnable JARs.
    doLast {
        file(archiveFile).setExecutable(true, false)
    }
}

tasks.register("prepareForRuntime", Copy) {
    from(project.file("build/libs")) // Source directory where the JAR file is built
    into(project.file("build/lib")) // Target directory for jpackage input
    dependsOn jar
}
jpackageImage.dependsOn prepareForRuntime

runtime {
    options = ['--strip-debug',
               '--compress', '2',
               '--no-header-files',
               '--no-man-pages',
               '--strip-native-commands',
               '--vm', 'server']
    modules = ['java.base' ,
               'java.desktop',
               'jdk.unsupported']
    distDir = project.file("build")

    jpackage {
        version = oisProjectVersion
        mainJar = jar.archiveFileName.get()
        if (os.contains('windows')) {
            // '--win-console' : will open cmd with logs when app running
            imageOptions = [
                    "--icon", file("../../../resources/icons/icon128.ico"),
                    "--name", oisProjectTitle
            ]
        } else if (os.contains('linux')) {
            imageOptions = [
                    "--icon", file("../../../resources/icons/icon128.png"),
                    "--name", oisProjectTitle
            ]
        } else if (os.contains('mac')) {
            imageOptions = [
                    "--icon", file("../../../resources/icons/icon128.icns"),
                    "--name", oisProjectTitle
            ]
        }
    }
}